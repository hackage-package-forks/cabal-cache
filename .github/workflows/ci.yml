name: Binaries

defaults:
  run:
    shell: bash

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        ghc:
        - 9.6.6
        os:
        - ubuntu-22.04
        - ubuntu-20.04
        - macOS-14
        - windows-2022
        - macos-13

    steps:
      - uses: actions/checkout@v4

      - uses: haskell-actions/setup@v2
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: 3.12.1.0

      - name: Set some window specific things
        if: matrix.os == 'windows-latest'
        run: echo 'EXE_EXT=.exe' >> $GITHUB_ENV

      - name: Configure project
        run: |
          cabal configure
          cabal build all --dry-run

      - name: Build
        # Try building it twice in case of flakey builds on Windows
        run: cabal build all || cabal build all

      - name: Compress Binary
        id: compress_binary
        env:
          GHC_VER: ${{ matrix.ghc }}
        run: |
          HS_BIN=$(cabal list-bin cabal-cache)
          test -f "$HS_BIN"
          NAME="cabal-cache"

          arch_os="$(uname -m)-${{ matrix.os }}"

          cp "$HS_BIN" "$NAME${{env.EXE_EXT}}"
          [ "$OS" != Windows_NT ] && strip "$NAME${{env.EXE_EXT}}"

          mkdir -p artifacts

          tar zcvf "artifacts/$NAME-$arch_os.tar.gz" "$NAME${{env.EXE_EXT}}"
          echo "path_targz=$NAME.targz" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v2
        with:
          name: cabal-cache-${{ runner.OS }}-${{ matrix.ghc }}
          path: artifacts

  check:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}

    steps:
      - uses: actions/checkout@v2

      - name: Check if cabal project is sane
        run: |
          PROJECT_DIR=$PWD
          mkdir -p $PROJECT_DIR/build/sdist
          for i in $(git ls-files | grep '\.cabal'); do
            cd $PROJECT_DIR && cd `dirname $i`
            cabal check
          done

      - name: Tag new version
        id: tag
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          package_version="$(cat *.cabal | grep '^version:' | cut -d : -f 2 | xargs)"

          echo "Package version is v$package_version"

          git fetch --unshallow origin

          if git tag "v$package_version"; then
            echo "Tagging with new version "v$package_version""

            if git push origin "v$package_version"; then
              echo "Tagged with new version "v$package_version""

              echo "tag=v$package_version" >> $GITHUB_OUTPUT
            fi
          fi

  release:
    needs: [build, check]
    runs-on: ubuntu-latest

    if: ${{ needs.check.outputs.tag != '' }}

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v2

      - name: Create source distribution
        run: |
          PROJECT_DIR=$PWD
          mkdir -p $PROJECT_DIR/build/sdist
          for i in $(git ls-files | grep '\.cabal'); do
            cd $PROJECT_DIR && cd `dirname $i`
            cabal v2-sdist -o $PROJECT_DIR/build/sdist
          done;

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check.outputs.tag }}
          release_name: Release ${{ needs.check.outputs.tag }}
          body: Undocumented
          draft: true
          prerelease: false

  publish:
    needs: [build, release]

    runs-on: ${{ matrix.os }}

    if: ${{ needs.check.outputs.tag != '' }}

    strategy:
      fail-fast: false
      matrix:
        ghc:
        - 9.6.6
        os:
        - ubuntu-22.04
        - ubuntu-20.04
        - macOS-14
        - windows-2022

    steps:
      - uses: actions/download-artifact@v2
        id: download_artifact
        with:
          name: cabal-cache-${{ runner.OS }}-${{ matrix.ghc }}
          path: artifacts

      - name: URL
        run: ls artifacts

      - name: Compute axes
        id: axes
        run: |
          arch_os="$(uname -m)-${{ matrix.os }}"
          echo "arch_os=$arch_os" >> $GITHUB_OUTPUT

      - name: Set some window specific things
        if: matrix.os == 'windows-latest'
        run: echo 'EXE_EXT=.exe' >> $GITHUB_ENV

      - name: Upload Release Binary
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: artifacts/cabal-cache-${{ steps.axes.outputs.arch_os }}.tar.gz
          asset_name: cabal-cache-${{ steps.axes.outputs.arch_os }}.tar.gz
          asset_content_type: application/gzip

